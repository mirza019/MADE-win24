pipeline WeatherDataProcessing {

    // Pipeline structure
    FetchZipFile 
        -> UnzipArchive
        -> SelectDataFile 
        -> ReadTextData
        -> ParseCSVFile
        -> RenameMainHeaders
        -> RenameBatteryColumn
        -> ValidateColumns
        -> ConvertTemperature
        -> ConvertBatteryTemperature
        -> SaveToDatabase;

    // BLOCK DEFINITIONS
    // 1. Download the dataset from the specified URL
    block FetchZipFile oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // 2. Extract the archive
    block UnzipArchive oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // 3. Select the target CSV file within the extracted archive
    block SelectDataFile oftype FilePicker {
        path: "/data.csv";
    }

    // 4. Interpret raw text files
    block ReadTextData oftype TextFileInterpreter {}

    // 5. Parse CSV file using the appropriate delimiter
    block ParseCSVFile oftype CSVInterpreter {
        delimiter: ";";
    }

    // 6. Rename column headers for the specified range
    // 6.1 Translate and rename columns A-E
    block RenameMainHeaders oftype CellWriter {
        at: range A1:E1;
        write: ["id", "producer", "model", "month", "temperature"];
    }
    // 6.2 Translate and rename column J
    block RenameBatteryColumn oftype CellWriter {
        at: cell J1;
        write: ["battery_temperature"];
    }

    // 7. Transform Celsius temperatures to Fahrenheit for both temperature columns
    transform CelsiusToFahrenheit {
        from CelsiusValue oftype decimal;
        to FahrenheitValue oftype decimal;

        FahrenheitValue: (CelsiusValue * 9/5) + 32;
    }

    block ConvertTemperature oftype TableTransformer {
        inputColumns: ["temperature"];
        outputColumn: "temperature";
        uses: CelsiusToFahrenheit;
    }

    block ConvertBatteryTemperature oftype TableTransformer {
        inputColumns: ["battery_temperature"];
        outputColumn: "battery_temperature";
        uses: CelsiusToFahrenheit;
    }

    // 8. Define custom value types and validation constraints
    constraint PositiveId on integer:
        value > 0;

    valuetype id oftype integer {
        constraints: [PositiveId];
    }

    constraint MonthRange oftype RangeConstraint {
        lowerBound: 1;
        lowerBoundInclusive: true;
        upperBound: 12;
        upperBoundInclusive: true;
    }

    valuetype month oftype integer {
        constraints:[MonthRange];
    }

    // 9. Validate table structure and enforce data types
    block ValidateColumns oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype id,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype month,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    // 10. Save data into a SQLite database
    block SaveToDatabase oftype SQLiteLoader {
        table: "temperatures";
        file: "./temperatures.sqlite";
    }
}
