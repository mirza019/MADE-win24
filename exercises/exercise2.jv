// This pipeline pulls tree planting data from the internet, cleans it up,
// and stores it neatly in an SQLite database

pipeline TreePlantingPipeline {

  // Steps to process the data, from fetching to saving
  DataFetcher          // Step 1: Grab data from the web
    -> TextInterpreter // Step 2: Read it as plain text
    -> CSVParser       // Step 3: Turn text into a table using CSV rules
    -> DataFormatter   // Step 4: Pick out the columns we care about, check values
    -> DatabaseSaver;  // Step 5: Save the final data into a database

  // Connect to the data source online
  block DataFetcher oftype HttpExtractor {
    url: "https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/stadt-neuss-herbstpflanzung-2023/exports/csv";
  }

  // Read data as plain text for easier handling
  block TextInterpreter oftype TextFileInterpreter { }

  // Use CSV rules to turn text into a table we can work with
  block CSVParser oftype CSVInterpreter {
    delimiter: ";";    // Columns are separated by semicolons
    enclosing: '"';    // Text is enclosed in double quotes
    enclosingEscape: '"';
  }

  // Select specific columns, validate values, and set types
  block DataFormatter oftype TableInterpreter {
    header: true; // Use the first row for column names
    columns: [
      "lfd_nr" oftype integer,          // Row number
      "stadtteil" oftype VogelsangText, // Neighborhood, must start with "Vogelsang"
      "standort" oftype text,           // Location description
      "baumart_botanisch" oftype text,  // Botanical name of the tree
      "id" oftype GeoCoordinate,        // Latitude and longitude, in specific format
      "baumfamilie" oftype text,        // Family of the tree species
    ];
  }

  // Save everything into a SQLite database file called "trees.sqlite"
  block DatabaseSaver oftype SQLiteLoader {
    table: "trees"; // Name of the table inside the database
    file: "./trees.sqlite";
  }
}

// Type to make sure "stadtteil" only contains entries that start with "Vogelsang"
valuetype VogelsangText oftype text {
    constraints: [ VogelsangConstraint ];
}

// Type to make sure "id" contains valid geo-coordinates
valuetype GeoCoordinate oftype text {
    constraints: [ CoordinateConstraint ];
}

// Rule: "stadtteil" must start with "Vogelsang"
constraint VogelsangConstraint on text: value matches /^Vogelsang.*$/;

// Rule: "id" should be in the format "latitude, longitude"
constraint CoordinateConstraint on text: value matches /^\d{1,3}\.\d*, \d{1,3}\.\d*$/;
