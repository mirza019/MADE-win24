pipeline WB_pipeline {

  // grab Excel from URL
  block RetrieveExcel oftype HttpExtractor {
    url: "https://thedocs.worldbank.org/en/doc/7d852628d96b9411d43e5d36d5dff941-0050062022/original/Graphs-Chapter-5-02082022.xlsx";
  }

  // parse the Excel file
  block LoadAndParseExcel oftype XLSXInterpreter {}

  // access required sheet
  block AccessSheet oftype SheetPicker {
    sheetName: "Figure S5.1.2";
  }

  // select data range
  block IsolateDataRange oftype CellRangeSelector {
    select: range P2:S45;
  }

  // update column names
  block StandardizeHeaders oftype CellWriter {
    at: range P2:S2;
    write: [
      "Country Code",        // from "ISO3"
      "Economy",             // unchanged
      "GDP per Capita",      // clearer
      "Bond Issuance Share"  // simplified
    ];
  }

  // check GDP is positive
  valuetype ValidatePositiveGdp oftype decimal {
    constraints: [EnsurePositiveGdp];
  }
  constraint EnsurePositiveGdp on decimal:
    value > 0;

  // ensure bond share is 0-1
  valuetype ValidateBondRange oftype decimal {
    constraints: [EnsureValidBondRange];
  }
  constraint EnsureValidBondRange on decimal:
    value >= 0 and value <= 1;

  // prepare bond data for DB
  block FormatBondInfo oftype TableInterpreter {
    header: true;
    columns: [
      "Country Code" oftype CountryCodeAlpha3,
      "Bond Issuance Share" oftype ValidateBondRange
    ];
  }

  // prepare GDP data for DB
  block FormatGdpInfo oftype TableInterpreter {
    header: true;
    columns: [
      "Country Code" oftype CountryCodeAlpha3,
      "GDP per Capita" oftype ValidatePositiveGdp
    ];
  }

  // save bond data
  block RecordBondData oftype SQLiteLoader {
    table: "bondIssuance";
    file: "./country-stats.sqlite";
  }

  // save GDP data
  block RecordGdpData oftype SQLiteLoader {
    table: "gdpPerCapita";
    file: "./country-stats.sqlite";
  }

  // process and store bond data
  RetrieveExcel
    -> LoadAndParseExcel
    -> AccessSheet
    -> StandardizeHeaders
    -> IsolateDataRange
    -> FormatBondInfo
    -> RecordBondData;

  // process and store GDP data
  IsolateDataRange
    -> FormatGdpInfo
    -> RecordGdpData;
}
